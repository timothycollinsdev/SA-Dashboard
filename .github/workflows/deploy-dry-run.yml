# Per:
#   https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#restrictions-for-accessing-a-cache
#   https://github.com/actions/cache/issues/231#issuecomment-605299793
#   https://github.com/actions/cache/issues/149#issuecomment-573933774
#
# actions/cache@v2 doesn't share caches between branches, but it does share
# with child branches. That means workflows run on pull requests, and tags
# never share their cache with each other but can all use caches from the
# master branch. So, this workflow runs on pushes to the master branch, making
# sure there's a parent branch for pull requests and tags to get their cache
# from.

# This workflow also does a dry run of updating the AWS ECS task definition to
# to validate that will work, though it does so with temporary Docker images
# tagged by git SHA instead of git tag like deploy.yml, since this workflow
# isn't connected to any tags.

on:
  pull_request: {}
  push:
    branches:
      - master
  workflow_dispatch:

name: Deploy (dry run)

env:
  AWS_REGION: us-east-1
  ECS_SERVICE: opportunity-mit-edu-service
  ECS_CLUSTER: opportunity-prod-cluster
  ECS_TASK_DEFINITION: .github/workflows/.aws/task-definition.json
  ECR_REPOSITORY: opportunity-prod/nginx

jobs:
  dryrun:
    name: Deploy (dry run)
    runs-on: ubuntu-latest

    steps:
      # 1. Setup
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Temporarily disabling layering caching due to issues with builds
      # writing layers to the cache. That's a change in behavior on GitHub's
      # side, so it's assumed it will start working again at some point in
      # the future.
      # - name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      - name: Set derived vars
        id: vars
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # Creates tag like:
        #   xxxxxx.dkr.ecr.us-east-1.amazonaws.com/nginx:f4455f62fba95ae5c529f0186b6eb861c87ed5b4
        run: |
          IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY
          echo "::set-output name=IMAGE_SHA::$IMAGE_NAME:${{ github.sha }}"

      # 2. Build
      - name: Build and tag -- but don't push -- Docker image to Amazon ECR
        id: build-image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: nginx/Dockerfile
          push: false
          # See above actions/cache@v2 about temporarily commenting out layer caching.
          # cache-from: type=local,src=/tmp/.buildx-cache
          # cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          # buildkitd-flags: --debug

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: nginx
          image: ${{ steps.vars.outputs.IMAGE_SHA }}

      # 3. Cleanup

      # For avoiding a runaway cache size bug
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      # - name: Move Docker cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache
