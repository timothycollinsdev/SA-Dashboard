# Based on a combination of:
#   https://docs.github.com/en/actions/guides/deploying-to-amazon-elastic-container-service
#   https://github.com/docker/build-push-action/blob/9379083e426e2e84abb80c8c091f5cdeb7d3fd7a/docs/advanced/cache.md

# To add:
#   Instructions for generating the task-definition.json file using aws cli

on:
  push:
    # Triggers on new tags/releases like v0.0.1
    tags:
      v[0-9]+.[0-9]+.[0-9]+
  workflow_dispatch:

name: Deploy to Amazon ECS

env:
  AWS_REGION: us-east-1
  ECS_SERVICE: opportunity-prod-service
  ECS_CLUSTER: opportunity-prod-cluster
  ECS_TASK_DEFINITION: .github/workflows/.aws/task-definition.json
  NGINX_ECR_REPOSITORY: opportunity-prod/nginx
  NGINX_CONTAINER_NAME: nginx
  DASHBOARD_ECR_REPOSITORY: opportunity-prod/dashboard
  DASHBOARD_CONTAINER_NAME: dashboard

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1. Setup
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get tag name
        id: vars
        run: |
          TAG=${GITHUB_REF/refs\/tags\//}
          echo "::set-output name=TAG::${GITHUB_REF/refs\/tags\//}"
          echo "$TAG"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up derived vars
        id: vars
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # Creates tags like:
        #   xxxxxx.dkr.ecr.us-east-1.amazonaws.com/nginx:f4455f62fba95ae5c529f0186b6eb861c87ed5b4
        #   xxxxxx.dkr.ecr.us-east-1.amazonaws.com/nginx:v0.0.1
        #   xxxxxx.dkr.ecr.us-east-1.amazonaws.com/dashboard:f4455f62fba95ae5c529f0186b6eb861c87ed5b4
        #   xxxxxx.dkr.ecr.us-east-1.amazonaws.com/dashboard:v0.0.1
        run: |
          echo "::set-output name=NGINX_SHA_IMAGE::$ECR_REGISTRY/$NGINX_ECR_REPOSITORY:${{ github.sha }}"
          echo "::set-output name=NGINX_TAG_IMAGE::$ECR_REGISTRY/$NGINX_ECR_REPOSITORY:${{ steps.vars.outputs.TAG }}"
          echo "::set-output name=DASHBOARD_SHA_IMAGE::$ECR_REGISTRY/$DASHBOARD_ECR_REPOSITORY:${{ github.sha }}"
          echo "::set-output name=DASHBOARD_TAG_IMAGE::$ECR_REGISTRY/$DASHBOARD_ECR_REPOSITORY:${{ steps.vars.outputs.TAG }}"

      # 2. Build

      # 2a. NGINX
      - name: Build, tag, and push Docker image to Amazon ECR
        id: nginx-build-image
        uses: docker/build-push-action@v2
        with:
          context: nginx
          push: true
          tags: ${{ steps.vars.outputs.NGINX_SHA_IMAGE }}, ${{ steps.vars.outputs.NGINX_TAG_IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: nginx-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: nginx
          image: ${{ steps.vars.outputs.NGINX_TAG_IMAGE }}

      # 2b. Dashboard
      - name: Build, tag, and push Docker image to Amazon ECR
        id: dashboard-build-image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.vars.outputs.DASHBOARD_SHA_IMAGE }}, ${{ steps.vars.outputs.DASHBOARD_TAG_IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: dashboard-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.nginx-task-def.outputs.task-definition }}
          container-name: dashboard
          image: ${{ steps.vars.outputs.DASHBOARD_TAG_IMAGE }}


      # 3. Deploy
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.dashboard-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      # 4. Cleanup

      # For avoiding a runaway cache size bug
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
